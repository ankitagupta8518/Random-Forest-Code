{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pandas import Series, DataFrame\n",
    "import numpy as np\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ams = json.loads(open(\"amsterdam.json\").read())\n",
    "ams = DataFrame(ams)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>guests_included</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>price</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>room_type</th>\n",
       "      <th>instant_bookable</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>$145.00</td>\n",
       "      <td>52.361173</td>\n",
       "      <td>4.866755</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>$88.00</td>\n",
       "      <td>52.370237</td>\n",
       "      <td>4.859507</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>$130.00</td>\n",
       "      <td>52.371424</td>\n",
       "      <td>4.848644</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>$90.00</td>\n",
       "      <td>52.312889</td>\n",
       "      <td>4.980151</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>$39.00</td>\n",
       "      <td>52.395334</td>\n",
       "      <td>4.916701</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10000</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>$118.00</td>\n",
       "      <td>52.347202</td>\n",
       "      <td>4.846432</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10001</th>\n",
       "      <td>34.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>31</td>\n",
       "      <td>$129.00</td>\n",
       "      <td>52.344071</td>\n",
       "      <td>4.868194</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>$130.00</td>\n",
       "      <td>52.345653</td>\n",
       "      <td>4.869328</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>$135.00</td>\n",
       "      <td>52.347393</td>\n",
       "      <td>4.875956</td>\n",
       "      <td>Private room</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>$94.00</td>\n",
       "      <td>52.350096</td>\n",
       "      <td>4.849824</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10005</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>$110.00</td>\n",
       "      <td>52.352727</td>\n",
       "      <td>4.883391</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>$120.00</td>\n",
       "      <td>52.347000</td>\n",
       "      <td>4.869016</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10007</th>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>$60.00</td>\n",
       "      <td>52.349061</td>\n",
       "      <td>4.848241</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10008</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>$95.00</td>\n",
       "      <td>52.354826</td>\n",
       "      <td>4.846678</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10009</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>$125.00</td>\n",
       "      <td>52.356436</td>\n",
       "      <td>4.850362</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>$90.00</td>\n",
       "      <td>52.398657</td>\n",
       "      <td>4.904897</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10010</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>$180.00</td>\n",
       "      <td>52.358714</td>\n",
       "      <td>4.876988</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10011</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>$138.00</td>\n",
       "      <td>52.357034</td>\n",
       "      <td>4.852240</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10012</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>$130.00</td>\n",
       "      <td>52.352460</td>\n",
       "      <td>4.853883</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10013</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>$185.00</td>\n",
       "      <td>52.352637</td>\n",
       "      <td>4.851988</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10014</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>$95.00</td>\n",
       "      <td>52.355270</td>\n",
       "      <td>4.850254</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10015</th>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>$75.00</td>\n",
       "      <td>52.354253</td>\n",
       "      <td>4.854128</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10016</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>89</td>\n",
       "      <td>2</td>\n",
       "      <td>$65.00</td>\n",
       "      <td>52.357430</td>\n",
       "      <td>4.850106</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10017</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>$100.00</td>\n",
       "      <td>52.351354</td>\n",
       "      <td>4.854050</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10018</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>$99.00</td>\n",
       "      <td>52.353511</td>\n",
       "      <td>4.851090</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       host_listings_count  accommodates  bathrooms  bedrooms  \\\n",
       "0                      1.0             6        1.0       2.0   \n",
       "1                      1.0             2        1.0       1.0   \n",
       "10                     1.0             2        1.0       1.0   \n",
       "100                    1.0             5        1.0       4.0   \n",
       "1000                   1.0             1        1.0       1.0   \n",
       "10000                  1.0             3        1.0       2.0   \n",
       "10001                 34.0             4        1.0       2.0   \n",
       "10002                  1.0             4        1.0       3.0   \n",
       "10003                  1.0             4        1.0       1.0   \n",
       "10004                  1.0             2        1.0       1.0   \n",
       "10005                  1.0             2        1.0       1.0   \n",
       "10006                  1.0             2        1.5       1.0   \n",
       "10007                  2.0             3        1.0       1.0   \n",
       "10008                  1.0             2        1.0       1.0   \n",
       "10009                  1.0             2        1.0       1.0   \n",
       "1001                   1.0             3        1.0       0.0   \n",
       "10010                  1.0             4        1.0       1.0   \n",
       "10011                  1.0             2        1.0       1.0   \n",
       "10012                  1.0             2        1.5       1.0   \n",
       "10013                  1.0             4        1.0       3.0   \n",
       "10014                  1.0             2        1.0       0.0   \n",
       "10015                  5.0             2        1.0       1.0   \n",
       "10016                  2.0             2        1.0       1.0   \n",
       "10017                  1.0             2        1.0       1.0   \n",
       "10018                  1.0             2        1.0       1.0   \n",
       "\n",
       "       guests_included  minimum_nights  number_of_reviews  \\\n",
       "0                    1               3                  4   \n",
       "1                    1               2                 17   \n",
       "10                   1               3                  0   \n",
       "100                  1               5                  2   \n",
       "1000                 1               1                 32   \n",
       "10000                1               2                  3   \n",
       "10001                1               2                  5   \n",
       "10002                1               2                 10   \n",
       "10003                1               3                 16   \n",
       "10004                1               1                  0   \n",
       "10005                1              10                  2   \n",
       "10006                1               3                 11   \n",
       "10007                1               2                  0   \n",
       "10008                2               4                  5   \n",
       "10009                2               2                  0   \n",
       "1001                 2               2                  0   \n",
       "10010                2               2                 25   \n",
       "10011                2               2                 10   \n",
       "10012                1               4                  1   \n",
       "10013                1               4                  6   \n",
       "10014                1               3                  1   \n",
       "10015                1               2                  5   \n",
       "10016                1               3                 89   \n",
       "10017                1               4                  1   \n",
       "10018                1               2                 10   \n",
       "\n",
       "       calculated_host_listings_count    price   latitude  longitude  \\\n",
       "0                                   1  $145.00  52.361173   4.866755   \n",
       "1                                   1   $88.00  52.370237   4.859507   \n",
       "10                                  1  $130.00  52.371424   4.848644   \n",
       "100                                 1   $90.00  52.312889   4.980151   \n",
       "1000                                1   $39.00  52.395334   4.916701   \n",
       "10000                               1  $118.00  52.347202   4.846432   \n",
       "10001                              31  $129.00  52.344071   4.868194   \n",
       "10002                               1  $130.00  52.345653   4.869328   \n",
       "10003                               1  $135.00  52.347393   4.875956   \n",
       "10004                               1   $94.00  52.350096   4.849824   \n",
       "10005                               1  $110.00  52.352727   4.883391   \n",
       "10006                               1  $120.00  52.347000   4.869016   \n",
       "10007                               2   $60.00  52.349061   4.848241   \n",
       "10008                               1   $95.00  52.354826   4.846678   \n",
       "10009                               1  $125.00  52.356436   4.850362   \n",
       "1001                                1   $90.00  52.398657   4.904897   \n",
       "10010                               1  $180.00  52.358714   4.876988   \n",
       "10011                               1  $138.00  52.357034   4.852240   \n",
       "10012                               1  $130.00  52.352460   4.853883   \n",
       "10013                               1  $185.00  52.352637   4.851988   \n",
       "10014                               1   $95.00  52.355270   4.850254   \n",
       "10015                               4   $75.00  52.354253   4.854128   \n",
       "10016                               2   $65.00  52.357430   4.850106   \n",
       "10017                               1  $100.00  52.351354   4.854050   \n",
       "10018                               1   $99.00  52.353511   4.851090   \n",
       "\n",
       "             room_type instant_bookable  \n",
       "0      Entire home/apt                f  \n",
       "1      Entire home/apt                f  \n",
       "10     Entire home/apt                f  \n",
       "100    Entire home/apt                f  \n",
       "1000      Private room                t  \n",
       "10000  Entire home/apt                f  \n",
       "10001  Entire home/apt                t  \n",
       "10002  Entire home/apt                t  \n",
       "10003     Private room                f  \n",
       "10004  Entire home/apt                f  \n",
       "10005  Entire home/apt                f  \n",
       "10006  Entire home/apt                f  \n",
       "10007     Private room                t  \n",
       "10008  Entire home/apt                f  \n",
       "10009  Entire home/apt                f  \n",
       "1001   Entire home/apt                t  \n",
       "10010  Entire home/apt                f  \n",
       "10011  Entire home/apt                f  \n",
       "10012  Entire home/apt                f  \n",
       "10013  Entire home/apt                f  \n",
       "10014  Entire home/apt                f  \n",
       "10015     Private room                t  \n",
       "10016     Private room                t  \n",
       "10017  Entire home/apt                f  \n",
       "10018  Entire home/apt                f  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.head(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(ams)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['host_listings_count', 'accommodates', 'bathrooms', 'bedrooms',\n",
       "       'guests_included', 'minimum_nights', 'number_of_reviews',\n",
       "       'calculated_host_listings_count', 'price', 'latitude', 'longitude',\n",
       "       'room_type', 'instant_bookable'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "host_listings_count               float64\n",
       "accommodates                        int64\n",
       "bathrooms                         float64\n",
       "bedrooms                          float64\n",
       "guests_included                     int64\n",
       "minimum_nights                      int64\n",
       "number_of_reviews                   int64\n",
       "calculated_host_listings_count      int64\n",
       "price                              object\n",
       "latitude                          float64\n",
       "longitude                         float64\n",
       "room_type                          object\n",
       "instant_bookable                   object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "host_listings_count                3\n",
       "accommodates                       0\n",
       "bathrooms                         18\n",
       "bedrooms                          12\n",
       "guests_included                    0\n",
       "minimum_nights                     0\n",
       "number_of_reviews                  0\n",
       "calculated_host_listings_count     0\n",
       "price                              0\n",
       "latitude                           0\n",
       "longitude                          0\n",
       "room_type                          0\n",
       "instant_bookable                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      host_listings_count  accommodates  bathrooms  bedrooms  guests_included  \\\n",
      "0                     1.0             6        1.0       2.0                1   \n",
      "1                     1.0             2        1.0       1.0                1   \n",
      "10                    1.0             2        1.0       1.0                1   \n",
      "100                   1.0             5        1.0       4.0                1   \n",
      "1000                  1.0             1        1.0       1.0                1   \n",
      "\n",
      "      minimum_nights  number_of_reviews  calculated_host_listings_count  \\\n",
      "0                  3                  4                               1   \n",
      "1                  2                 17                               1   \n",
      "10                 3                  0                               1   \n",
      "100                5                  2                               1   \n",
      "1000               1                 32                               1   \n",
      "\n",
      "       price   latitude  longitude        room_type instant_bookable  \n",
      "0     145.00  52.361173   4.866755  Entire home/apt                f  \n",
      "1      88.00  52.370237   4.859507  Entire home/apt                f  \n",
      "10    130.00  52.371424   4.848644  Entire home/apt                f  \n",
      "100    90.00  52.312889   4.980151  Entire home/apt                f  \n",
      "1000   39.00  52.395334   4.916701     Private room                t  \n"
     ]
    }
   ],
   "source": [
    "ams['price'] = ams['price'].str.replace(\"$\", \"\")\n",
    "print(ams.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ams['price'] = pd.to_numeric(ams['price'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "host_listings_count               float64\n",
       "accommodates                        int64\n",
       "bathrooms                         float64\n",
       "bedrooms                          float64\n",
       "guests_included                     int64\n",
       "minimum_nights                      int64\n",
       "number_of_reviews                   int64\n",
       "calculated_host_listings_count      int64\n",
       "price                             float64\n",
       "latitude                          float64\n",
       "longitude                         float64\n",
       "room_type                          object\n",
       "instant_bookable                   object\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "133.994"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(ams['price'].mean(),3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "999.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(ams['price'].max(), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "425.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(ams['price'].quantile(.99), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15031, 13)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams = ams.query(\"price <= 440\")\n",
    "ams.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "210.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams['price'].quantile(.90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "ams = ams.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14998, 13)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "host_listings_count               0\n",
       "accommodates                      0\n",
       "bathrooms                         0\n",
       "bedrooms                          0\n",
       "guests_included                   0\n",
       "minimum_nights                    0\n",
       "number_of_reviews                 0\n",
       "calculated_host_listings_count    0\n",
       "price                             0\n",
       "latitude                          0\n",
       "longitude                         0\n",
       "room_type                         0\n",
       "instant_bookable                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from math import radians, cos, sin, asin, sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14998, 14)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams[\"d_centre\"] = 0.0\n",
    "ams.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def haversine(lon1, lat1):\n",
    "    lon2 = 4.899431\n",
    "    lat2 = 52.379189\n",
    "    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n",
    "    dlon = lon2 - lon1 \n",
    "    dlat = lat2 - lat1 \n",
    "    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n",
    "    c = 2 * asin(sqrt(a)) \n",
    "    km = 6367 * c\n",
    "    return km"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "for index, row in ams.iterrows():\n",
    "    ams.loc[index, 'd_centre'] = haversine(row['longitude'], row['latitude'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>guests_included</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>price</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>room_type</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>d_centre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3158</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>85.0</td>\n",
       "      <td>52.378546</td>\n",
       "      <td>4.900775</td>\n",
       "      <td>Private room</td>\n",
       "      <td>f</td>\n",
       "      <td>0.115801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3168</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.0</td>\n",
       "      <td>52.378850</td>\n",
       "      <td>4.901433</td>\n",
       "      <td>Shared room</td>\n",
       "      <td>f</td>\n",
       "      <td>0.140946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2639</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>159.0</td>\n",
       "      <td>52.379089</td>\n",
       "      <td>4.897293</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "      <td>0.145468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3010</th>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>150.0</td>\n",
       "      <td>52.378549</td>\n",
       "      <td>4.896679</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>0.199767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1860</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>120.0</td>\n",
       "      <td>52.378398</td>\n",
       "      <td>4.896674</td>\n",
       "      <td>Private room</td>\n",
       "      <td>f</td>\n",
       "      <td>0.206638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1447</th>\n",
       "      <td>4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>250.0</td>\n",
       "      <td>52.377927</td>\n",
       "      <td>4.897073</td>\n",
       "      <td>Private room</td>\n",
       "      <td>f</td>\n",
       "      <td>0.212781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3064</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>150.0</td>\n",
       "      <td>52.378273</td>\n",
       "      <td>4.896626</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>0.215779</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      host_listings_count  accommodates  bathrooms  bedrooms  guests_included  \\\n",
       "3158                  1.0             2        1.5       1.0                1   \n",
       "3168                  1.0             4        1.0       1.0                1   \n",
       "2639                  1.0             4        1.0       1.0                2   \n",
       "3010                  4.0             2        1.0       1.0                1   \n",
       "1860                  1.0             2        1.0       1.0                1   \n",
       "1447                  4.0             2        1.0       1.0                1   \n",
       "3064                  2.0             2        1.0       1.0                1   \n",
       "\n",
       "      minimum_nights  number_of_reviews  calculated_host_listings_count  \\\n",
       "3158               1                  0                               1   \n",
       "3168               1                  0                               1   \n",
       "2639               3                 27                               1   \n",
       "3010               1                  4                               4   \n",
       "1860               1                  9                               1   \n",
       "1447               1                  0                               4   \n",
       "3064               2                 21                               1   \n",
       "\n",
       "      price   latitude  longitude        room_type instant_bookable  d_centre  \n",
       "3158   85.0  52.378546   4.900775     Private room                f  0.115801  \n",
       "3168   41.0  52.378850   4.901433      Shared room                f  0.140946  \n",
       "2639  159.0  52.379089   4.897293  Entire home/apt                f  0.145468  \n",
       "3010  150.0  52.378549   4.896679     Private room                t  0.199767  \n",
       "1860  120.0  52.378398   4.896674     Private room                f  0.206638  \n",
       "1447  250.0  52.377927   4.897073     Private room                f  0.212781  \n",
       "3064  150.0  52.378273   4.896626  Entire home/apt                t  0.215779  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.sort_values(\"d_centre\", ascending = True).head(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "price    118.1\n",
       "dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ams.query('room_type == \"Private room\" & d_centre <= 1').agg({'price': np.mean}).round(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = ams.drop(\"price\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "host_listings_count               0\n",
       "accommodates                      0\n",
       "bathrooms                         0\n",
       "bedrooms                          0\n",
       "guests_included                   0\n",
       "minimum_nights                    0\n",
       "number_of_reviews                 0\n",
       "calculated_host_listings_count    0\n",
       "latitude                          0\n",
       "longitude                         0\n",
       "room_type                         0\n",
       "instant_bookable                  0\n",
       "d_centre                          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = pd.get_dummies(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>guests_included</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>d_centre</th>\n",
       "      <th>room_type_Entire home/apt</th>\n",
       "      <th>room_type_Private room</th>\n",
       "      <th>room_type_Shared room</th>\n",
       "      <th>instant_bookable_f</th>\n",
       "      <th>instant_bookable_t</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>52.361173</td>\n",
       "      <td>4.866755</td>\n",
       "      <td>2.987199</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>52.370237</td>\n",
       "      <td>4.859507</td>\n",
       "      <td>2.885443</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>52.371424</td>\n",
       "      <td>4.848644</td>\n",
       "      <td>3.551815</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>52.312889</td>\n",
       "      <td>4.980151</td>\n",
       "      <td>9.181975</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>52.395334</td>\n",
       "      <td>4.916701</td>\n",
       "      <td>2.142603</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      host_listings_count  accommodates  bathrooms  bedrooms  guests_included  \\\n",
       "0                     1.0             6        1.0       2.0                1   \n",
       "1                     1.0             2        1.0       1.0                1   \n",
       "10                    1.0             2        1.0       1.0                1   \n",
       "100                   1.0             5        1.0       4.0                1   \n",
       "1000                  1.0             1        1.0       1.0                1   \n",
       "\n",
       "      minimum_nights  number_of_reviews  calculated_host_listings_count  \\\n",
       "0                  3                  4                               1   \n",
       "1                  2                 17                               1   \n",
       "10                 3                  0                               1   \n",
       "100                5                  2                               1   \n",
       "1000               1                 32                               1   \n",
       "\n",
       "       latitude  longitude  d_centre  room_type_Entire home/apt  \\\n",
       "0     52.361173   4.866755  2.987199                          1   \n",
       "1     52.370237   4.859507  2.885443                          1   \n",
       "10    52.371424   4.848644  3.551815                          1   \n",
       "100   52.312889   4.980151  9.181975                          1   \n",
       "1000  52.395334   4.916701  2.142603                          0   \n",
       "\n",
       "      room_type_Private room  room_type_Shared room  instant_bookable_f  \\\n",
       "0                          0                      0                   1   \n",
       "1                          0                      0                   1   \n",
       "10                         0                      0                   1   \n",
       "100                        0                      0                   1   \n",
       "1000                       1                      0                   0   \n",
       "\n",
       "      instant_bookable_t  \n",
       "0                      0  \n",
       "1                      0  \n",
       "10                     0  \n",
       "100                    0  \n",
       "1000                   1  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = ams['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.model_selection as model_selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size = 0.3, random_state = 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accommodates    0.045\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "var = x_train.agg({\"accommodates\": np.mean}) - x_test.agg({\"accommodates\": np.mean})\n",
    "print(round(var, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HP\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg = RandomForestRegressor(n_estimators = 100, max_depth = 5, max_features = 'sqrt', oob_score = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=5,\n",
       "           max_features='sqrt', max_leaf_nodes=None,\n",
       "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=1,\n",
       "           oob_score=True, random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4823335199906741"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48719564030048035"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.oob_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2117.814882928803"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.mean_squared_error(y_test, reg.predict(x_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For n estimators = 30\n",
      "OOB Score is: 0.4758601504653678\n",
      "*************************\n",
      "For n estimators = 40\n",
      "OOB Score is: 0.479104611572129\n",
      "*************************\n",
      "For n estimators = 50\n",
      "OOB Score is: 0.4788592831852212\n",
      "*************************\n",
      "For n estimators = 60\n",
      "OOB Score is: 0.48111795188123807\n",
      "*************************\n",
      "For n estimators = 70\n",
      "OOB Score is: 0.4806327009372088\n",
      "*************************\n",
      "For n estimators = 80\n",
      "OOB Score is: 0.4844161318894268\n",
      "*************************\n",
      "For n estimators = 90\n",
      "OOB Score is: 0.48472926837561614\n",
      "*************************\n",
      "For n estimators = 100\n",
      "OOB Score is: 0.481446558097515\n",
      "*************************\n",
      "For n estimators = 110\n",
      "OOB Score is: 0.4832045651202006\n",
      "*************************\n",
      "For n estimators = 120\n",
      "OOB Score is: 0.4833253026713308\n",
      "*************************\n",
      "For n estimators = 130\n",
      "OOB Score is: 0.4811632316426212\n",
      "*************************\n",
      "For n estimators = 140\n",
      "OOB Score is: 0.48237674289400756\n",
      "*************************\n",
      "For n estimators = 150\n",
      "OOB Score is: 0.48205309699303667\n",
      "*************************\n",
      "For n estimators = 160\n",
      "OOB Score is: 0.485956444177884\n",
      "*************************\n",
      "For n estimators = 170\n",
      "OOB Score is: 0.4856225618774813\n",
      "*************************\n",
      "For n estimators = 180\n",
      "OOB Score is: 0.4849261153403178\n",
      "*************************\n",
      "For n estimators = 190\n",
      "OOB Score is: 0.48354086953876807\n",
      "*************************\n",
      "For n estimators = 200\n",
      "OOB Score is: 0.48347649450664254\n",
      "*************************\n",
      "For n estimators = 210\n",
      "OOB Score is: 0.483032466394976\n",
      "*************************\n",
      "For n estimators = 220\n",
      "OOB Score is: 0.4830120027508784\n",
      "*************************\n",
      "For n estimators = 230\n",
      "OOB Score is: 0.48319914698890676\n",
      "*************************\n",
      "For n estimators = 240\n",
      "OOB Score is: 0.48440286042029945\n",
      "*************************\n",
      "For n estimators = 250\n",
      "OOB Score is: 0.48487695160506106\n",
      "*************************\n",
      "For n estimators = 260\n",
      "OOB Score is: 0.4857251253928154\n",
      "*************************\n",
      "For n estimators = 270\n",
      "OOB Score is: 0.48461541808918607\n",
      "*************************\n",
      "For n estimators = 280\n",
      "OOB Score is: 0.4841487390231243\n",
      "*************************\n",
      "For n estimators = 290\n",
      "OOB Score is: 0.4841892854830453\n",
      "*************************\n",
      "For n estimators = 300\n",
      "OOB Score is: 0.48400119980073364\n",
      "*************************\n",
      "For n estimators = 310\n",
      "OOB Score is: 0.48578969672731354\n",
      "*************************\n",
      "For n estimators = 320\n",
      "OOB Score is: 0.48548473373735257\n",
      "*************************\n",
      "For n estimators = 330\n",
      "OOB Score is: 0.48506391756016065\n",
      "*************************\n",
      "For n estimators = 340\n",
      "OOB Score is: 0.48577813377223844\n",
      "*************************\n",
      "For n estimators = 350\n",
      "OOB Score is: 0.4849180770626724\n",
      "*************************\n",
      "For n estimators = 360\n",
      "OOB Score is: 0.48476160389887957\n",
      "*************************\n",
      "For n estimators = 370\n",
      "OOB Score is: 0.4839344836380536\n",
      "*************************\n",
      "For n estimators = 380\n",
      "OOB Score is: 0.48359832903656275\n",
      "*************************\n",
      "For n estimators = 390\n",
      "OOB Score is: 0.4847593890255386\n",
      "*************************\n",
      "For n estimators = 400\n",
      "OOB Score is: 0.4852675751606724\n",
      "*************************\n",
      "For n estimators = 410\n",
      "OOB Score is: 0.48607992367749364\n",
      "*************************\n",
      "For n estimators = 420\n",
      "OOB Score is: 0.4859447117095327\n",
      "*************************\n",
      "For n estimators = 430\n",
      "OOB Score is: 0.4852735641082053\n",
      "*************************\n",
      "For n estimators = 440\n",
      "OOB Score is: 0.48474423414447565\n",
      "*************************\n",
      "For n estimators = 450\n",
      "OOB Score is: 0.48446382235123275\n",
      "*************************\n",
      "For n estimators = 460\n",
      "OOB Score is: 0.4855304731850133\n",
      "*************************\n",
      "For n estimators = 470\n",
      "OOB Score is: 0.48513587969163763\n",
      "*************************\n",
      "For n estimators = 480\n",
      "OOB Score is: 0.4854228831598091\n",
      "*************************\n",
      "For n estimators = 490\n",
      "OOB Score is: 0.48538986074308255\n",
      "*************************\n",
      "For n estimators = 500\n",
      "OOB Score is: 0.4848461775020183\n",
      "*************************\n",
      "For n estimators = 510\n",
      "OOB Score is: 0.48564647125611415\n",
      "*************************\n",
      "For n estimators = 520\n",
      "OOB Score is: 0.48597479121345155\n",
      "*************************\n",
      "For n estimators = 530\n",
      "OOB Score is: 0.4850073487973461\n",
      "*************************\n",
      "For n estimators = 540\n",
      "OOB Score is: 0.4848540565409184\n",
      "*************************\n",
      "For n estimators = 550\n",
      "OOB Score is: 0.4851688228564952\n",
      "*************************\n",
      "For n estimators = 560\n",
      "OOB Score is: 0.4856473696814194\n",
      "*************************\n",
      "For n estimators = 570\n",
      "OOB Score is: 0.48541054867171085\n",
      "*************************\n",
      "For n estimators = 580\n",
      "OOB Score is: 0.48510332100146636\n",
      "*************************\n",
      "For n estimators = 590\n",
      "OOB Score is: 0.48501868812080084\n",
      "*************************\n"
     ]
    }
   ],
   "source": [
    "for i in range(30, 600, 10):\n",
    "    reg = RandomForestRegressor(n_estimators = i, max_depth = 5, max_features = 'sqrt', oob_score = True)\n",
    "    reg.fit(x_train, y_train)\n",
    "    oob = reg.oob_score_\n",
    "    print(\"For n estimators = \"+ str(i))\n",
    "    print(\"OOB Score is: \"+ str(oob))\n",
    "    print(\"*************************\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48120687830358144"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = RandomForestRegressor(n_estimators = 530, max_depth = 5, max_features = 'sqrt', oob_score = True)\n",
    "reg.fit(x_train, y_train)\n",
    "reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4851073913607781"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.oob_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7.90843240e-03, 3.13530028e-01, 6.75962625e-02, 2.39583967e-01,\n",
       "       7.77401289e-02, 4.63294396e-03, 3.71804711e-03, 1.30550220e-02,\n",
       "       1.57110644e-02, 3.36263905e-02, 6.04857866e-02, 9.79693916e-02,\n",
       "       6.34377803e-02, 2.25181475e-04, 4.83258078e-04, 2.96314856e-04])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "imp = pd.Series(reg.feature_importances_, index = x.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "accommodates                      0.313530\n",
       "bedrooms                          0.239584\n",
       "room_type_Entire home/apt         0.097969\n",
       "guests_included                   0.077740\n",
       "bathrooms                         0.067596\n",
       "room_type_Private room            0.063438\n",
       "d_centre                          0.060486\n",
       "longitude                         0.033626\n",
       "latitude                          0.015711\n",
       "calculated_host_listings_count    0.013055\n",
       "host_listings_count               0.007908\n",
       "minimum_nights                    0.004633\n",
       "number_of_reviews                 0.003718\n",
       "instant_bookable_f                0.000483\n",
       "instant_bookable_t                0.000296\n",
       "room_type_Shared room             0.000225\n",
       "dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imp.sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x23f791eba90>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imp.sort_values(ascending = False).plot(kind = \"bar\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
